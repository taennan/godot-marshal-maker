class_name ASSaverFileWriter
extends ASSerdeFileWriter


func write() -> void:
	var text := _get_text()
	FileAccess.open(_filepath, FileAccess.WRITE).store_string(text)


func _get_text() -> String:
	var template := _get_template()
	var to_json_impl := _get_to_json_impl()
	return template.format({
		"type": _obj_tokens.type,
		"to_json_impl": to_json_impl,
	})

func _get_template() -> String:
	return r"""# Autogenerated by AutoSerde
class_name {type}Saver


static func to_json_file(obj: {type}, filepath: String) -> void:
	var text := {type}Saver.to_json_text(obj)
	FileAccess.open(filepath, FileAccess.WRITE).store_string(text)


static func to_json_text(obj: {type}) -> String:
	var json := {type}Saver.to_json(obj)
	var text := JSON.stringify(json, "  ")
	return text


{to_json_impl}
"""

func _get_to_json_impl() -> String:
	var primitive_conversions := ""
	var serde_conversions := ""
	var serde_array_conversions := ""
	
	for field_data in _obj_tokens.fields():
		var factory := ASSaverFieldConversionFactory.new(field_data, _context)
		var conversion_string := factory.make()
		
		if factory.is_field_primitive():
			primitive_conversions += conversion_string
		elif factory.is_field_serde_object():
			serde_conversions += conversion_string
		elif factory.is_field_serde_array():
			serde_array_conversions += conversion_string
	
	return """
static func to_json(obj: {type}) -> Dictionary:
	var result := {}
	
{primitive_conversions}
	
{serde_conversions}
	
{serde_array_conversions}
	
	return result
""".format({
		"primitive_conversions": primitive_conversions,
		"serde_conversions": serde_conversions,
		"serde_array_conversions": serde_array_conversions,
	})
